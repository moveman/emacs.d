* Features
:properties:
:header-args:emacs-lisp: :tangle yes
:end:
** prelude

package.

#+begin_src emacs-lisp
  (setq package-archives '(("gnu" . "http://elpa.gnu.org/packages/")
                           ("melpa" . "http://melpa.org/packages/")
                           ("melpa-s" . "http://stable.melpa.org/packages/")))

  (setq package-archive-priorities '(("gnu" . 10)
                                     ("melpa" . 15)
                                     ("melpa-s" . 20)))

  (unless (file-exists-p package-user-dir)
    (package-refresh-contents)
    (package-install 'use-package))

  (setq use-package-always-ensure t)
#+end_src

#+begin_src emacs-lisp
  (use-package hydra)

  (defun core-find-emacs-help ()
    (interactive)
    (find-file-other-window (concat user-emacs-directory "README.md")))

  (defun core-move-splitter-left (arg)
    "Move window splitter left."
    (interactive "p")
    (if (let ((windmove-wrap-around))
          (windmove-find-other-window 'right))
        (shrink-window-horizontally arg)
      (enlarge-window-horizontally arg)))

  (defun core-move-splitter-right (arg)
    "Move window splitter right."
    (interactive "p")
    (if (let ((windmove-wrap-around))
          (windmove-find-other-window 'right))
        (enlarge-window-horizontally arg)
      (shrink-window-horizontally arg)))

  (defun core-move-splitter-up (arg)
    "Move window splitter up."
    (interactive "p")
    (if (let ((windmove-wrap-around))
          (windmove-find-other-window 'up))
        (enlarge-window arg)
      (shrink-window arg)))

  (defun core-move-splitter-down (arg)
    "Move window splitter down."
    (interactive "p")
    (if (let ((windmove-wrap-around))
          (windmove-find-other-window 'up))
        (shrink-window arg)
      (enlarge-window arg)))

  (defhydra core-move-splitter ()
    "splitter"
    ("h" core-move-splitter-left)
    ("j" core-move-splitter-down)
    ("k" core-move-splitter-up)
    ("l" core-move-splitter-right)
    ("q" nil "quit"))
#+end_src

storage.

#+begin_src emacs-lisp
  (defconst core-cache-directory
    (expand-file-name "~/.emacs.d/.cache/"))

  (make-directory core-cache-directory t)
#+end_src

#+begin_src emacs-lisp
  (defconst core-temporary-directory
    (format "%s%s%s/" temporary-file-directory "emacs" (user-uid)))
#+end_src

settings.

#+begin_src emacs-lisp
  (defalias 'yes-or-no-p 'y-or-n-p)

  (electric-pair-mode +1)

  (show-paren-mode +1)

  (setq auto-save-file-name-transforms `((".*" ,core-temporary-directory t)))
  (setq auto-save-list-file-prefix (concat core-temporary-directory ".saves-"))
  (setq backup-directory-alist `((".*" . ,core-temporary-directory)))
  (setq bookmark-default-file (concat core-cache-directory "bookmarks"))
  (setq eshell-cmpl-ignore-case t)
  (setq eshell-directory-name (concat core-cache-directory "eshell/"))
  (setq inhibit-splash-screen t)
  (setq initial-scratch-message "")
  (setq recentf-save-file (concat core-cache-directory "recentf"))
  (setq ring-bell-function 'ignore)
  (setq scroll-conservatively 101)
  (setq scroll-preserve-screen-position t)

  (setq-default indent-tabs-mode nil)
#+end_src

custom.

#+begin_src emacs-lisp
  (setq custom-file (concat core-cache-directory "custom.el"))
  (load custom-file t)
#+end_src

** evil

#+begin_src emacs-lisp
  (use-package evil
    :demand t
    :bind (:map evil-insert-state-map
           ("C-a" . nil)
           ("C-d" . nil)
           ("C-e" . nil)
           ("C-k" . nil)
           ("C-n" . nil)
           ("C-p" . nil)
           ("C-y" . nil)
           :map evil-normal-state-map
           ("RET" . evil-next-line))
    :init
    (setq evil-want-C-u-scroll t)
    (setq evil-want-Y-yank-to-eol t)
    :config
    (evil-mode +1))
#+end_src

#+begin_src emacs-lisp
  (use-package evil-magit
    :after magit)
#+end_src

#+begin_src emacs-lisp
  (use-package evil-matchit
    :config
    (global-evil-matchit-mode +1))
#+end_src

#+begin_src emacs-lisp
  (use-package evil-surround
    :config
    (global-evil-surround-mode +1))
#+end_src

#+begin_src emacs-lisp
  (use-package evil-visualstar
    :config
    (global-evil-visualstar-mode +1))
#+end_src

#+begin_src emacs-lisp
  (evil-set-initial-state 'package-menu-mode 'motion)
#+end_src

** keys

bind-map.

#+begin_src emacs-lisp
  (use-package bind-map)

  (bind-map core-global-map
    :keys ("M-m")
    :evil-keys ("SPC")
    :override-minor-modes t)
#+end_src

bind-key.

#+begin_src emacs-lisp
  (use-package bind-key)

  (bind-keys
   :map universal-argument-map
   ("SPC u" . universal-argument-more)
   :map core-global-map
   ("!"   . shell-command)
   ("SPC" . execute-extended-command)
   ("bb"  . switch-to-buffer)
   ("bd"  . kill-this-buffer)
   ("bl"  . buffer-menu)
   ("bo"  . mode-line-other-buffer)
   ("ff"  . find-file)
   ("fh"  . core-find-emacs-help)
   ("fi"  . imenu)
   ("fj"  . dired-jump)
   ("fs"  . save-buffer)
   ("qe"  . save-buffers-kill-emacs)
   ("qq"  . save-buffers-kill-terminal)
   ("u"   . universal-argument)
   ("w."  . core-move-splitter/body)
   ("w="  . balance-windows)
   ("wH"  . evil-window-move-far-left)
   ("wJ"  . evil-window-move-very-bottom)
   ("wK"  . evil-window-move-very-top)
   ("wL"  . evil-window-move-far-right)
   ("wd"  . delete-window)
   ("wh"  . evil-window-left)
   ("wj"  . evil-window-down)
   ("wk"  . evil-window-up)
   ("wl"  . evil-window-right)
   ("wm"  . delete-other-windows)
   ("ws"  . split-window-below)
   ("wv"  . split-window-right))
#+end_src

which key.

#+begin_src emacs-lisp
  (use-package which-key
    :diminish which-key-mode
    :config
    (which-key-declare-prefixes
      "SPC b" "buffer"
      "SPC f" "file"
      "SPC g" "git"
      "SPC p" "project"
      "SPC q" "quit"
      "SPC t" "toggle"
      "SPC w" "window")
    (which-key-mode +1))
#+end_src

** edit

company is a completion engine for text.

#+begin_src emacs-lisp
  (use-package company
    :defer t
    :init
    (add-hook 'prog-mode-hook #'company-mode)
    :config
    (define-key company-active-map (kbd "M-n") nil)
    (define-key company-active-map (kbd "M-p") nil)
    (define-key company-active-map (kbd "C-n") #'company-select-next)
    (define-key company-active-map (kbd "C-p") #'company-select-previous)
    (make-variable-buffer-local 'company-backends))
#+end_src

ivy is a completion engine for mini-buffer.

#+begin_src emacs-lisp
  (use-package ivy
    :demand t
    :diminish ivy-mode
    :bind (:map core-global-map
           ("r" . ivy-resume))
    :init
    (setq ivy-count-format "(%d/%d) ")
    (setq ivy-use-virtual-buffers t)
    :config
    (ivy-mode +1))

  (use-package ivy-hydra)
#+end_src

ace-link

#+begin_src emacs-lisp
  (use-package ace-link
    :config
    (ace-link-setup-default))
#+end_src

counsel

#+begin_src emacs-lisp
  (use-package counsel
    :demand t
    :diminish counsel-mode
    :bind (:map core-global-map
           ("s" . counsel-ag))
    :config
    (counsel-mode +1))
#+end_src

#+begin_src emacs-lisp
  (use-package counsel-projectile
    :after projectile
    :bind (:map core-global-map
           ("ps" . counsel-projectile-ag))
    :config
    (counsel-projectile-on))
#+end_src

Get environment variables from the shell.

#+begin_src emacs-lisp
  (use-package exec-path-from-shell
    :if (memq window-system '(mac ns))
    :config
    (exec-path-from-shell-initialize))
#+end_src

swiper

#+begin_src emacs-lisp
  (use-package swiper
    :bind ("C-s" . swiper))
#+end_src

undo-tree

#+begin_src emacs-lisp
  (use-package undo-tree
    :pin gnu
    :diminish undo-tree-mode
    :init
    (setq undo-tree-auto-save-history t)
    (setq undo-tree-history-directory-alist `((".*" . ,core-temporary-directory)))
    :config
    (global-undo-tree-mode +1))
#+end_src

** project

magit is an interface to git.

#+begin_src emacs-lisp
  (use-package magit
    :diminish auto-revert-mode
    :bind (:map core-global-map
           ("gb" . magit-blame)
           ("gd" . magit-diff-popup)
           ("gf" . magit-file-popup)
           ("gl" . magit-log-popup)
           ("gs" . magit-status)))
#+end_src

projectile is a project interaction library.

#+begin_src emacs-lisp
  (use-package projectile
    :pin melpa
    :demand t
    :diminish projectile-mode
    :bind (:map core-global-map
           ("pa" . projectile-find-other-file)
           ("pb" . projectile-switch-to-buffer)
           ("pc" . projectile-compile-project)
           ("pd" . projectile-find-dir)
           ("pe" . projectile-run-eshell)
           ("pf" . projectile-find-file)
           ("ph" . projectile-dired)
           ("pk" . projectile-kill-buffers)
           ("po" . projectile-project-buffers-other-buffer)
           ("pp" . projectile-switch-project))
    :init
    (setq projectile-cache-file (concat core-cache-directory "projectile.cache"))
    (setq projectile-known-projects-file (concat core-cache-directory "projectile-bookmarks.eld"))
    (setq projectile-completion-system 'ivy)
    (setq projectile-switch-project-action 'projectile-dired)
    :config
    (projectile-global-mode +1))
#+end_src

** windows

#+begin_src emacs-lisp
  (use-package ace-window
    :bind (:map core-global-map
           ("wo" . aw-flip-window)
           ("ww" . ace-window))
    :init
    (setq aw-scope 'frame))
#+end_src

#+begin_src emacs-lisp
  (use-package window-purpose
    :diminish purpose-mode
    :init
    (setq purpose-user-mode-purposes '((cmake-mode . edit)
                                       (magit-mode . search)))
    (setq purpose-user-name-purposes '(("README.md" . readme)))
    :config
    (purpose-compile-user-configuration)
    (purpose-mode +1))
#+end_src

#+begin_src emacs-lisp
  (use-package winner
    :bind (:map core-global-map
           ("wr" . winner-redo)
           ("wu" . winner-undo))
    :init
    (winner-mode +1))
#+end_src

** ui

#+begin_src emacs-lisp
  (blink-cursor-mode -1)

  (menu-bar-mode -1)

  (scroll-bar-mode -1)

  (tool-bar-mode -1)
#+end_src

The mode line.

#+begin_src emacs-lisp
  (use-package spaceline
    :pin melpa
    :init
    (setq powerline-default-separator 'bar)
    (setq spaceline-highlight-face-func
          #'spaceline-highlight-face-evil-state)
    :config
    (require 'spaceline-config)
    (spaceline-emacs-theme))
#+end_src

The zenburn theme is easier for the eyes. But ~fci-rule-color~ is set
to invisible.

#+begin_src emacs-lisp
  (use-package zenburn-theme
    :config
    (load-theme 'zenburn t)
    (setq fci-rule-color "#383838"))
#+end_src

** program

Draw a vertial line at ~fill-column~. It can be changed by setting
~fci-rule-column~.

#+begin_src emacs-lisp
  (use-package fill-column-indicator
    :bind (:map core-global-map
           ("tf" . fci-mode)))
#+end_src

Highlight keywords in comments and strings.

#+begin_src emacs-lisp
  (use-package hl-todo
    :bind (:map core-global-map
           ("tt" . hl-todo-mode))
    :init
    (add-hook 'prog-mode-hook #'hl-todo-mode))
#+end_src

Show line numbers.

#+begin_src emacs-lisp
  (use-package linum
    :bind (:map core-global-map
           ("tn" . linum-mode))
    :init
    (setq linum-format "%d ")
    (add-hook 'prog-mode-hook #'linum-mode))
#+end_src

Highlight text representing color codes.

#+begin_src emacs-lisp
  (use-package rainbow-mode
    :diminish rainbow-mode
    :bind (:map core-global-map
           ("tr" . rainbow-mode))
    :init
    (add-hook 'prog-mode-hook 'rainbow-mode))
#+end_src

Highlight parens according to their depth.

#+begin_src emacs-lisp
  (use-package rainbow-delimiters
    :defer t
    :init
    (add-hook 'prog-mode-hook #'rainbow-delimiters-mode))
#+end_src

Visualize and cleanup undesired whitespace.

#+begin_src emacs-lisp
  (use-package whitespace
    :diminish whitespace-mode
    :bind (:map core-global-map
           ("tw" . whitespace-mode))
    :init
    (setq whitespace-style '(face trailing empty))
    (add-hook 'prog-mode-hook #'whitespace-mode))
#+end_src

An underscore is part of a word in Vim.

#+begin_src emacs-lisp
  (defun core-prog-mode-config ()
    (modify-syntax-entry ?_ "w"))

  (add-hook 'prog-mode-hook #'core-prog-mode-config)
#+end_src

*** c++

#+begin_src emacs-lisp
  (bind-map core-c++-mode-map
    :evil-keys (",")
    :major-modes (c++-mode))

  (defun core-c++-config ()
    (c-set-style "linux")
    (c-set-offset 'inher-intro 0)
    (c-set-offset 'inline-open 0)
    (c-set-offset 'innamespace 0)
    (c-set-offset 'member-init-intro 0)
    (setq c-basic-offset 2)
    (setq indent-tabs-mode t)
    (setq tab-width 2))

  (defun core-c++-company-config ()
    (setq company-backends '(company-rtags
                             (company-dabbrev-code company-keywords)
                             company-files
                             company-dabbrev)))

  (use-package cc-mode
    :defer t
    :init
    (add-hook 'c-mode-common-hook #'core-c++-config)
    (add-to-list 'auto-mode-alist '("\\.h\\'" . c++-mode)))

  (use-package cmake-mode
    :defer t)

  (use-package rtags
    :bind (:map core-c++-mode-map
           ("gb" . rtags-location-stack-back)
           ("gg" . rtags-find-symbol-at-point)
           ("gu" . rtags-find-references-at-point)
           ("gv" . rtags-find-virtuals-at-point))
    :init
    (defalias 'caadr 'cl-caadr)
    (setq rtags-completions-enabled t)
    (setq rtags-display-result-backend 'ivy))

  (use-package company-rtags
    :defer t
    :init
    (add-hook 'c-mode-common-hook #'core-c++-company-config))

  (use-package ivy-rtags
    :defer t)

  (use-package smart-tabs-mode
    :config
    (smart-tabs-insinuate 'c 'c++))
#+end_src

*** clojure

#+begin_src emacs-lisp
  (bind-map core-clojure-cider-map
    :evil-keys (",")
    :major-modes (cider-repl-mode))

  (bind-map core-clojure-mode-map
    :evil-keys (",")
    :major-modes (clojure-mode))

  (defun core-clojure-config ()
    (modify-syntax-entry ?- "w"))

  (defun core-clojure-eval-last-sexp ()
    (interactive)
    (evil-append 1)
    (condition-case err
        (cider-eval-last-sexp)
      (error (message (error-message-string err))))
    (evil-normal-state))

  (use-package cider
    :bind (:map core-clojure-cider-map
           ("ss" . cider-switch-to-last-clojure-buffer)
           :map core-clojure-mode-map
           ("eb" . cider-eval-buffer)
           ("ee" . core-clojure-eval-last-sexp)
           ("ef" . cider-eval-defun-at-point)
           ("gb" . cider-pop-back)
           ("gg" . cider-find-var)
           ("ss" . cider-switch-to-repl-buffer))
    :init
    (add-hook 'cider-repl-mode-hook #'company-mode)
    (evil-set-initial-state 'cider-stacktrace-mode 'emacs))

  (use-package clojure-mode
    :defer t
    :init
    (setq cider-prompt-for-symbol nil)
    (add-hook 'clojure-mode-hook #'core-clojure-config))
#+end_src

*** emacs-lisp

#+begin_src emacs-lisp
  (bind-map core-emacs-lisp-map
    :evil-keys (",")
    :major-modes (emacs-lisp-mode lisp-interaction-mode))

  (bind-keys
   :map core-emacs-lisp-map
   ("eb" . eval-buffer)
   ("ee" . eval-last-sexp)
   ("ef" . eval-defun)
   ("gb" . xref-pop-marker-stack)
   ("gg" . xref-find-definitions)
   ("gu" . xref-find-references))

  (defun core-emacs-lisp-config ()
    (modify-syntax-entry ?- "w"))

  (add-hook 'emacs-lisp-mode-hook #'core-emacs-lisp-config)
#+end_src

*** go

- github.com/nsf/gocode
- github.com/rogpeppe/godef
- golang.org/x/tools/cmd/goimports

#+begin_src emacs-lisp
  (bind-map core-go-mode-map
    :evil-keys (",")
    :major-modes (go-mode))

  (defun core-go-company-config ()
    (add-to-list 'company-backends #'company-go))

  (defun core-go-config ()
    ;; NOTE: the last arguemnt being `t' means only the buffer-local
    ;; value of the hook variable is modified.
    (add-hook 'before-save-hook #'gofmt-before-save nil t))

  (use-package company-go
    :defer t
    :init
    (setq company-go-show-annotation t)
    (add-hook 'go-mode-hook #'core-go-company-config))

  (use-package go-eldoc
    :defer t
    :init
    (add-hook 'go-mode-hook #'go-eldoc-setup))

  (use-package go-mode
    :bind (:map core-go-mode-map
           ("gb" . xref-pop-marker-stack)
           ("gg" . godef-jump))
    :init
    (setq gofmt-command "goimports")
    (add-hook 'go-mode-hook #'core-go-config))
#+end_src

*** markdown

#+begin_src emacs-lisp
  (use-package markdown-mode
    :defer t)
#+end_src

*** python

#+begin_src emacs-lisp
  (bind-map core-python-mode-map
    :evil-keys (",")
    :major-modes (python-mode))

  (defun core-python-company-config ()
    (add-to-list 'company-backends #'company-anaconda))

  (use-package anaconda-mode
    :bind (:map core-python-mode-map
           ("gb" . anaconda-mode-go-back)
           ("gg" . anaconda-mode-find-definitions)
           ("gu" . anaconda-mode-find-references))
    :init
    (setq anaconda-mode-installation-directory
          (concat core-cache-directory "anaconda-mode/"))
    (add-hook 'python-mode-hook #'anaconda-mode))

  (use-package company-anaconda
    :defer t
    :init
    (add-hook 'anaconda-mode-hook #'core-python-company-config))
#+end_src

*** rust

#+begin_src emacs-lisp
  (bind-map core-rust-mode-map
    :evil-keys (",")
    :major-modes (rust-mode))

  (use-package racer
    :bind (:map core-rust-mode-map
           ("fb" . rust-format-buffer)
           ("hh" . racer-describe)
           ("gg" . racer-find-definition))
    :init
    (setq racer-rust-src-path
          (concat (substring (shell-command-to-string "rustc --print sysroot") 0 -1)
                  "/lib/rustlib/src/rust/src"))
    (add-hook 'rust-mode-hook #'racer-mode)
    (evil-set-initial-state 'racer-help-mode 'motion))

  (use-package rust-mode
    :defer t)
#+end_src
